// Code generated by MockGen. DO NOT EDIT.
// Source: runtime.go

// Package mock_dag is a generated GoMock package.
package mock_dag

import (
	context "context"
	reflect "reflect"

	dag "git.in.zhihu.com/antispam/datasupply/dag"
	node "git.in.zhihu.com/antispam/datasupply/node"
	gomock "github.com/golang/mock/gomock"
)

// MockIRuntime is a mock of IRuntime interface.
type MockIRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockIRuntimeMockRecorder
}

// MockIRuntimeMockRecorder is the mock recorder for MockIRuntime.
type MockIRuntimeMockRecorder struct {
	mock *MockIRuntime
}

// NewMockIRuntime creates a new mock instance.
func NewMockIRuntime(ctrl *gomock.Controller) *MockIRuntime {
	mock := &MockIRuntime{ctrl: ctrl}
	mock.recorder = &MockIRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRuntime) EXPECT() *MockIRuntimeMockRecorder {
	return m.recorder
}

// AddNodeResultMonitor mocks base method.
func (m *MockIRuntime) AddNodeResultMonitor(arg0 func(node.INode, node.Result)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddNodeResultMonitor", arg0)
}

// AddNodeResultMonitor indicates an expected call of AddNodeResultMonitor.
func (mr *MockIRuntimeMockRecorder) AddNodeResultMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNodeResultMonitor", reflect.TypeOf((*MockIRuntime)(nil).AddNodeResultMonitor), arg0)
}

// Close mocks base method.
func (m *MockIRuntime) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIRuntimeMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIRuntime)(nil).Close))
}

// GetResultCopy mocks base method.
func (m *MockIRuntime) GetResultCopy() *dag.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResultCopy")
	ret0, _ := ret[0].(*dag.Result)
	return ret0
}

// GetResultCopy indicates an expected call of GetResultCopy.
func (mr *MockIRuntimeMockRecorder) GetResultCopy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResultCopy", reflect.TypeOf((*MockIRuntime)(nil).GetResultCopy))
}

// Run mocks base method.
func (m *MockIRuntime) Run(ctx context.Context, paramMap map[string]interface{}) dag.IRuntime {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, paramMap)
	ret0, _ := ret[0].(dag.IRuntime)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockIRuntimeMockRecorder) Run(ctx, paramMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIRuntime)(nil).Run), ctx, paramMap)
}

// Wait mocks base method.
func (m *MockIRuntime) Wait(ctx context.Context) dag.IRuntime {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", ctx)
	ret0, _ := ret[0].(dag.IRuntime)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockIRuntimeMockRecorder) Wait(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockIRuntime)(nil).Wait), ctx)
}

// WaitStage mocks base method.
func (m *MockIRuntime) WaitStage(ctx context.Context, stageName node.SupplyStage) dag.IRuntime {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitStage", ctx, stageName)
	ret0, _ := ret[0].(dag.IRuntime)
	return ret0
}

// WaitStage indicates an expected call of WaitStage.
func (mr *MockIRuntimeMockRecorder) WaitStage(ctx, stageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitStage", reflect.TypeOf((*MockIRuntime)(nil).WaitStage), ctx, stageName)
}
