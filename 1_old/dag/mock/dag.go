// Code generated by MockGen. DO NOT EDIT.
// Source: dag.go

// Package mock_dag is a generated GoMock package.
package mock_dag

import (
	context "context"
	reflect "reflect"

	dag "git.in.zhihu.com/antispam/datasupply/dag"
	node "git.in.zhihu.com/antispam/datasupply/node"
	gomock "github.com/golang/mock/gomock"
)

// MockIDAG is a mock of IDAG interface.
type MockIDAG struct {
	ctrl     *gomock.Controller
	recorder *MockIDAGMockRecorder
}

// MockIDAGMockRecorder is the mock recorder for MockIDAG.
type MockIDAGMockRecorder struct {
	mock *MockIDAG
}

// NewMockIDAG creates a new mock instance.
func NewMockIDAG(ctrl *gomock.Controller) *MockIDAG {
	mock := &MockIDAG{ctrl: ctrl}
	mock.recorder = &MockIDAGMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDAG) EXPECT() *MockIDAGMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIDAG) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIDAGMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIDAG)(nil).Close))
}

// ConvertField mocks base method.
func (m *MockIDAG) ConvertField(fieldCode string, value interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertField", fieldCode, value)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertField indicates an expected call of ConvertField.
func (mr *MockIDAGMockRecorder) ConvertField(fieldCode, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertField", reflect.TypeOf((*MockIDAG)(nil).ConvertField), fieldCode, value)
}

// GetField mocks base method.
func (m *MockIDAG) GetField(ctx context.Context, fieldCode string) (*node.Field, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetField", ctx, fieldCode)
	ret0, _ := ret[0].(*node.Field)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetField indicates an expected call of GetField.
func (mr *MockIDAGMockRecorder) GetField(ctx, fieldCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetField", reflect.TypeOf((*MockIDAG)(nil).GetField), ctx, fieldCode)
}

// GetFieldRelys mocks base method.
func (m *MockIDAG) GetFieldRelys(ctx context.Context, field string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldRelys", ctx, field)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldRelys indicates an expected call of GetFieldRelys.
func (mr *MockIDAGMockRecorder) GetFieldRelys(ctx, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldRelys", reflect.TypeOf((*MockIDAG)(nil).GetFieldRelys), ctx, field)
}

// GetID mocks base method.
func (m *MockIDAG) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockIDAGMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockIDAG)(nil).GetID))
}

// GetNodeByField mocks base method.
func (m *MockIDAG) GetNodeByField(ctx context.Context, field string) (node.INode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByField", ctx, field)
	ret0, _ := ret[0].(node.INode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByField indicates an expected call of GetNodeByField.
func (mr *MockIDAGMockRecorder) GetNodeByField(ctx, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByField", reflect.TypeOf((*MockIDAG)(nil).GetNodeByField), ctx, field)
}

// GetRoot mocks base method.
func (m *MockIDAG) GetRoot() node.INode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoot")
	ret0, _ := ret[0].(node.INode)
	return ret0
}

// GetRoot indicates an expected call of GetRoot.
func (mr *MockIDAGMockRecorder) GetRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoot", reflect.TypeOf((*MockIDAG)(nil).GetRoot))
}

// Run mocks base method.
func (m *MockIDAG) Run(ctx context.Context, runtimeID string, paramMap map[string]interface{}) dag.IRuntime {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, runtimeID, paramMap)
	ret0, _ := ret[0].(dag.IRuntime)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockIDAGMockRecorder) Run(ctx, runtimeID, paramMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIDAG)(nil).Run), ctx, runtimeID, paramMap)
}

// Supply mocks base method.
func (m *MockIDAG) Supply(ctx context.Context, runtimeID string, paramMap map[string]interface{}) *dag.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Supply", ctx, runtimeID, paramMap)
	ret0, _ := ret[0].(*dag.Result)
	return ret0
}

// Supply indicates an expected call of Supply.
func (mr *MockIDAGMockRecorder) Supply(ctx, runtimeID, paramMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Supply", reflect.TypeOf((*MockIDAG)(nil).Supply), ctx, runtimeID, paramMap)
}

// SupplyField mocks base method.
func (m *MockIDAG) SupplyField(ctx context.Context, data map[string]interface{}, field string) *node.FieldResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupplyField", ctx, data, field)
	ret0, _ := ret[0].(*node.FieldResult)
	return ret0
}

// SupplyField indicates an expected call of SupplyField.
func (mr *MockIDAGMockRecorder) SupplyField(ctx, data, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupplyField", reflect.TypeOf((*MockIDAG)(nil).SupplyField), ctx, data, field)
}

// Update mocks base method.
func (m *MockIDAG) Update(nodes []node.INode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", nodes)
}

// Update indicates an expected call of Update.
func (mr *MockIDAGMockRecorder) Update(nodes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIDAG)(nil).Update), nodes)
}

// Use mocks base method.
func (m *MockIDAG) Use(arg0 ...dag.Middleware) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Use", varargs...)
}

// Use indicates an expected call of Use.
func (mr *MockIDAGMockRecorder) Use(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockIDAG)(nil).Use), arg0...)
}
