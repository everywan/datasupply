// Code generated by MockGen. DO NOT EDIT.
// Source: supplier.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	supplier "git.in.zhihu.com/antispam/datasupply/supplier"
	gomock "github.com/golang/mock/gomock"
)

// MockISupplier is a mock of ISupplier interface.
type MockISupplier struct {
	ctrl     *gomock.Controller
	recorder *MockISupplierMockRecorder
}

// MockISupplierMockRecorder is the mock recorder for MockISupplier.
type MockISupplierMockRecorder struct {
	mock *MockISupplier
}

// NewMockISupplier creates a new mock instance.
func NewMockISupplier(ctrl *gomock.Controller) *MockISupplier {
	mock := &MockISupplier{ctrl: ctrl}
	mock.recorder = &MockISupplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISupplier) EXPECT() *MockISupplierMockRecorder {
	return m.recorder
}

// GetAllPlugin mocks base method.
func (m *MockISupplier) GetAllPlugin() map[string]supplier.IPlugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPlugin")
	ret0, _ := ret[0].(map[string]supplier.IPlugin)
	return ret0
}

// GetAllPlugin indicates an expected call of GetAllPlugin.
func (mr *MockISupplierMockRecorder) GetAllPlugin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPlugin", reflect.TypeOf((*MockISupplier)(nil).GetAllPlugin))
}

// GetName mocks base method.
func (m *MockISupplier) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockISupplierMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockISupplier)(nil).GetName))
}

// GetPlugin mocks base method.
func (m *MockISupplier) GetPlugin(pluginName string) (supplier.IPlugin, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugin", pluginName)
	ret0, _ := ret[0].(supplier.IPlugin)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPlugin indicates an expected call of GetPlugin.
func (mr *MockISupplierMockRecorder) GetPlugin(pluginName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugin", reflect.TypeOf((*MockISupplier)(nil).GetPlugin), pluginName)
}

// RegisterPlugin mocks base method.
func (m *MockISupplier) RegisterPlugin(arg0 supplier.IPlugin) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterPlugin", arg0)
}

// RegisterPlugin indicates an expected call of RegisterPlugin.
func (mr *MockISupplierMockRecorder) RegisterPlugin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPlugin", reflect.TypeOf((*MockISupplier)(nil).RegisterPlugin), arg0)
}

// Supply mocks base method.
func (m *MockISupplier) Supply(ctx context.Context, pluginName string, params []interface{}) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Supply", ctx, pluginName, params)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Supply indicates an expected call of Supply.
func (mr *MockISupplierMockRecorder) Supply(ctx, pluginName, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Supply", reflect.TypeOf((*MockISupplier)(nil).Supply), ctx, pluginName, params)
}
